#!/bin/bash

# Script to generate and update directory structure documentation
# For Dovetop Digital Site

# Configuration
OUTPUT_FILE=".notes/directory_structure.md"
EXCLUDE_DIRS="-not -path \"*/node_modules/*\" -not -path \"*/.git/*\" -not -path \"*/.next/*\" -not -path \"*/public/images/*\""
TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")

# Ensure .notes directory exists
mkdir -p .notes

# Create header for the documentation
cat > "$OUTPUT_FILE" << EOF
# Dovetop Digital Site - Directory Structure

> Last updated: $TIMESTAMP

This document provides an overview of the project's directory structure.

## Directory Overview

\`\`\`
EOF

# Generate the directory tree structure
find . -type d -not -path "*/node_modules/*" -not -path "*/.git/*" -not -path "*/.next/*" \
  -not -path "*/public/images/*" | sort | sed -e "s/[^-][^\/]*\//  │   /g" -e "s/│   \//│   /" \
  -e "s/│   \//│   /" -e "s/[^-][^\/]*\/$/  └── /" -e "s/│   └/  └/" | tail -n +2 >> "$OUTPUT_FILE"

echo "\`\`\`" >> "$OUTPUT_FILE"

# Add explanations for key directories
cat >> "$OUTPUT_FILE" << EOF

## Key Directories Explained

- **app/**: Next.js app router with route groups
  - **(auth)/**: Authentication and login related pages
  - **(default)/**: Main website pages
  
- **components/**: React components organized by functionality
  - **ui/**: Core UI elements like header, footer, and logo
  - **craco/**: Custom form and feature-related components
  
- **public/**: Static assets served by Next.js
  - **images/**: Image assets for the website

- **.notes/**: Project documentation and notes

## File Structure Notes

- The project uses Next.js App Router structure
- Component organization follows a flat hierarchy with domain-specific subfolders
- Styling is primarily handled by Tailwind CSS

EOF

echo "Directory structure documentation updated at $OUTPUT_FILE"

# Provide setup instructions for automation
cat >> "$OUTPUT_FILE" << EOF

---

> This document is automatically generated by the \`update_directory_structure.sh\` script.

## Automation Options

To automatically update this documentation:

1. **Git Hooks**: Add this script to your pre-commit hook
   ```bash
   # In .git/hooks/pre-commit
   ./update_directory_structure.sh
   git add .notes/directory_structure.md
   ```

2. **Manual Updates**: Run \`./update_directory_structure.sh\` after making structural changes

3. **CI Pipeline**: Include the script in your CI workflow
   ```yaml
   - name: Update Directory Structure
     run: ./update_directory_structure.sh
   ```
EOF

echo "Directory structure documentation created successfully at $OUTPUT_FILE" 